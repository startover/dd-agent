#!/bin/sh

AGENTPATH="/opt/oneapm-ci-agent/agent/agent.py"
AGENTCONF="/etc/oneapm-ci-agent/oneapm-ci-agent.conf"
DOGSTATSDPATH="/opt/oneapm-ci-agent/agent/dogstatsd.py"
AGENTUSER="oneapm-ci-agent"
PIDPATH="/var/run/oneapm-ci-agent/"
PROG="oneapm-ci-agent"
LOCKFILE=/var/lock/subsys/$PROG
FORWARDERPATH="/opt/oneapm-ci-agent/agent/ddagent.py"
SUPERVISORD_PATH="PATH=/opt/oneapm-ci-agent/embedded/bin:/opt/oneapm-ci-agent/bin:$PATH /opt/oneapm-ci-agent/bin/supervisord"
SUPERVISORCTL_PATH="/opt/oneapm-ci-agent/bin/supervisorctl"
SUPERVISOR_CONF="/etc/oneapm-ci-agent/supervisor.conf"
SUPERVISOR_SOCK="/opt/oneapm-ci-agent/run/oneapm-agent-supervisor.sock"
SUPERVISOR_PIDFILE="/opt/oneapm-ci-agent/run/oneapm-agent-supervisord.pid"

# Source function library.
. /etc/rc.d/init.d/functions


check_status() {
    # run checks to determine if the service is running or use generic status

    # if the sock exists, we can use supervisorctl
    if [ -e $SUPERVISOR_SOCK ]; then

        s=`$SUPERVISORCTL_PATH -c $SUPERVISOR_CONF status`

        # number of RUNNING supervisord programs (ignoring dogstatsd and jmxfetch)
	p=`echo "$s" | grep -Ev 'dogstatsd|jmxfetch' | grep -c RUNNING`

        # number of expected running supervisord programs (ignoring dogstatsd and jmxfetch)
	c=`grep -Ev 'dogstatsd|jmxfetch' $SUPERVISOR_CONF | grep -c '\[program:'`
        if [ "$p" -ne "$c" ]; then
            echo "$s"
            echo -n "OneAPM Agent (supervisor) is NOT running all child processes"; failure; echo
            return 1
        else
            echo -n "OneAPM Agent (supervisor) is running all child processes"; success; echo
            return 0
        fi
    else

        # if no sock, use the rc status function
        status -p $SUPERVISOR_PIDFILE $PROG
        RETVAL=$?
        if [ $RETVAL -eq 0 ]; then
            echo -n "OneAPM Agent (supervisor) is running."; success; echo
        else
            echo -n "OneAPM Agent (supervisor) is NOT running."; failure; echo
        fi
        return $RETVAL
    fi

    if [ -f "$LOCKFILE" ]; then
        echo -n 'OneAPM Agent is running'; success; echo
        return 0
    else
        echo -n 'OneAPM Agent is NOT running'; failure; echo
        return 1
    fi
}

grab_status() {
    GRABSTATUS=`check_status &>/dev/null`
}

start() {
    if [ ! -f $AGENTCONF ]; then
        echo "$AGENTCONF not found. Exiting."
        exit 3
    fi

    su $AGENTUSER -c "$AGENTPATH configcheck" > /dev/null
    if [ $? -ne 0 ]; then
        echo -n $'\n'"Invalid check configuration. Please run sudo /etc/init.d/oneapm-ci-agent configtest for more details."
        echo -n $'\n'"Resuming starting process."$'\n'
    fi

    # no need to test for status before daemon,
    # the daemon function does the right thing
    echo -n "Starting OneAPM Agent (using supervisord):"
    daemon --pidfile=$SUPERVISOR_PIDFILE $SUPERVISORD_PATH -c $SUPERVISOR_CONF > /dev/null
    # check if the agent is running once per second for 10 seconds
    retries=10
    while [ $retries -gt 1 ]; do
        if grab_status; then
            touch $LOCKFILE
            success; echo
            return 0
        else
            retries=$(($retries - 1))
            sleep 1
        fi
    done
    # after 10 tries the agent didn't start. Report the error and stop
    echo; check_status # check status will show us the error and take care of calling `failure`
    stop
    return 1
}

stop() {
    # no need to test for status before killproc,
    # it does the right thing. and testing supervisorctl status
    # before killproc can lead to states where you cannot stop!
    echo -n 'Stopping OneAPM Agent (using killproc on supervisord): '
    killproc -p $SUPERVISOR_PIDFILE
    rm -f $LOCKFILE
    echo
    return 0
}

restart() {
    stop
    start
}

info() {
    shift # Shift 'info' out of the args so we can pass any
          # additional options to the real command
          # (right now only oneapm-ci-agent supports additional flags)
    su $AGENTUSER -c "$AGENTPATH info $@"
    COLLECTOR_RETURN=$?
    su $AGENTUSER -c "$DOGSTATSDPATH info"
    DOGSTATSD_RETURN=$?
    su $AGENTUSER -c "$FORWARDERPATH info"
    FORWARDER_RETURN=$?
    exit $(($FORWARDER_RETURN+$COLLECTOR_RETURN+DOGSTATSD_RETURN))
}

configcheck() {
    su $AGENTUSER -c "$AGENTPATH configcheck"
    exit $?
}


case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    status)
        # Note: sh does not support arrays
        # Check for kernel version 3.18+ - overlayfs has known bug affecting unix domain sockets
        major=$(echo "$( uname -r )" | cut -d"." -f1)
        minor=$(echo "$( uname -r )" | cut -d"." -f2)
        # If major version 3, and minor version 18+, OR major version 4+
        if ( [ $major -eq 3 ] && [ $minor -ge 18 ] ) || [ $major -gt 3 ]; then
            RED='\033[0;31m' # Red Text
            NC='\033[0m' # No Color
            echo "${RED}Warning: Known bug in Linux Kernel 3.18+ causes 'status' to fail.${NC}"
            echo "Calling 'info', instead..."
            service oneapm-ci-agent info
        else
            check_status
        fi
        ;;
    info)
        info "$@"
        ;;
    configcheck)
        configcheck
        ;;

    configtest)
        configcheck
        ;;

    jmx)
        shift
        su $AGENTUSER -c "$AGENTPATH jmx $@"
        exit $?
        ;;

    flare)
        shift
        $AGENTPATH flare $@
        exit $?
        ;;

    *)
        echo "Usage: $0 {start|stop|restart|info|status|configcheck|configtest|jmx}"
        exit 2
esac
exit $?
